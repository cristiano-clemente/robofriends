{"version":3,"sources":["constants.js","reducers.js","components/SearchBox.js","components/Card.js","components/CardList.js","containers/App.js","actions.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","isPending","robots","error","SearchByName","styled","input","SearchBox","searchChange","type","placeholder","onChange","Container","div","Card","id","name","email","src","alt","toLowerCase","CardList","map","user","i","GlobalStyle","createGlobalStyle","Header","Heading","h1","CardContainer","App","dispatch","useDispatch","useSelector","state","searchRobots","requestRobots","onRequestRobots","event","fetch","then","response","json","data","payload","catch","useEffect","filteredRobots","filter","robot","includes","text","target","value","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1f306374.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return { ...state, searchField: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return { ...state, isPending: true }\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return { ...state, isPending: false, robots: action.payload }\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return { ...state, isPending: false, error: action.payload }\r\n        default:\r\n            return state\r\n    }\r\n}","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst SearchByName = styled.input`\r\n    outline: none;\r\n    border: 0;\r\n    padding: 1rem;\r\n    background-color: var(--overlay-color);\r\n    font-size: 1.1rem;\r\n    color: white;\r\n    border-radius: 0.5rem;\r\n    width: 30vw;\r\n    @media only screen and (max-width: 600px) {\r\n         width: 90vw;\r\n    }\r\n\r\n    /* make search box placeholder text white */\r\n    ::placeholder {\r\n      color: var(--text-medium-emphasis); /* chrome, firefox, opera, safari */\r\n      opacity: 1; /* firefox */\r\n    }\r\n\r\n    :-ms-input-placeholder {\r\n      color: var(--text-medium-emphasis); /* internet explorer */\r\n    }\r\n\r\n    ::-ms-input-placeholder {\r\n      color: var(--text-medium-emphasis);  /* microsoft edge */\r\n    }\r\n\r\n    /* disable search box cancel button */\r\n    ::-webkit-search-cancel-button {\r\n      display: none;\r\n    }\r\n  `\r\n\r\nconst SearchBox = ({ searchField, searchChange }) =>\r\n  <SearchByName\r\n    type='search'\r\n    placeholder='Search by name'\r\n    onChange={searchChange}\r\n  />\r\n\r\nexport default SearchBox","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  color: var(--text-medium-emphasis);\r\n  background-color: var(--surface-color);\r\n  transition: transform .5s;\r\n  border-radius: 0.5rem;\r\n  padding: 0.5rem;\r\n  margin: 0.5rem;\r\n  text-align: center;\r\n  width: 14rem;\r\n  &:hover {\r\n    color: var(--text-high-emphasis);\r\n    transform: scale(1.05);\r\n    background-color: var(--primary-color);\r\n  }\r\n  &:active {\r\n    transform: scale(0.9);\r\n  }\r\n`\r\n\r\nconst Card = ({ id, name, email }) =>\r\n  <Container>\r\n    <img src={`https://robohash.org/${id}?size=200x200`} alt='' />\r\n    <div>\r\n      <h2>{name}</h2>\r\n      <p>{email.toLowerCase()}</p>\r\n    </div>\r\n  </Container>\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from './Card'\r\n\r\nconst CardList = ({ robots }) =>\r\n  <>\r\n    {\r\n      robots.map((user, i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })\r\n    }\r\n  </>\r\n\r\nexport default CardList","import React, { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { setSearchField, requestRobots } from '../actions'\r\nimport styled, { createGlobalStyle } from 'styled-components'\r\nimport SearchBox from '../components/SearchBox'\r\nimport CardList from '../components/CardList'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  :root {\r\n    --background-color: rgba(20, 20, 20);\r\n    --surface-color: rgba(50, 50, 50);\r\n    --overlay-color: rgba(80, 80, 80);\r\n    --primary-color: #BB86FC;\r\n    --secondary-color: #03DAC5;\r\n    --text-high-emphasis: rgba(255, 255, 255, 0.87);\r\n    --text-medium-emphasis: rgba(255, 255, 255, 0.60);\r\n  }\r\n\r\n  @import url('https://fonts.googleapis.com/css2?family=Roboto&display=swap');\r\n  body {\r\n      margin: 0;\r\n      font-family: 'Roboto', sans-serif;\r\n      background-color: var(--background-color);\r\n      color: var(--text-medium-emphasis);\r\n  }\r\n\r\n  /* hide scrollbar */\r\n  *::-webkit-scrollbar {\r\n    display: none;  /* chrome, safari and opera */\r\n  }\r\n\r\n  * {\r\n    -ms-overflow-style: none;  /* ie and edge */\r\n    scrollbar-width: none;  /* firefox */\r\n  }\r\n`\r\n\r\nconst Header = styled.div`\r\n    margin: 1rem 0 0.5rem 0;\r\n    background-color: var(--surface-color);\r\n    padding: 1rem;\r\n    text-align: center;\r\n    `\r\n\r\nconst Heading = styled.h1`\r\n    margin: 0;\r\n    font-size: 6vw;\r\n    margin-bottom: 0.5rem;\r\n    color: var(--primary-color);\r\n    @media only screen and (max-width: 600px) {\r\n        font-size: 15vw;\r\n    }\r\n  `\r\n\r\nconst CardContainer = styled.div`\r\n    margin-bottom: 0.5rem;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    justify-content: center;\r\n  `\r\n\r\nconst App = () => {\r\n  const dispatch = useDispatch()\r\n  const { searchField } = useSelector(state => state.searchRobots)\r\n  const { robots, isPending, error } = useSelector(state => state.requestRobots)\r\n\r\n  const onSearchChange = event =>\r\n    dispatch(setSearchField(event.target.value))\r\n\r\n  const onRequestRobots = event =>\r\n    dispatch(requestRobots())\r\n\r\n  useEffect(\r\n    () => onRequestRobots(),\r\n    []\r\n  )\r\n\r\n  const filteredRobots = robots.filter(robot => {\r\n    return robot.name.toLowerCase().includes(searchField.toLowerCase())\r\n  })\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <Header>\r\n        <Heading>RoboFriends</Heading>\r\n        <SearchBox searchChange={onSearchChange} />\r\n      </Header>\r\n      <CardContainer>\r\n        {isPending &&\r\n          <h1> Loading... </h1>\r\n        }\r\n        {!error &&\r\n          <CardList robots={filteredRobots} />\r\n        }\r\n      </CardContainer>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nexport const setSearchField = text => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n})\r\n\r\nexport const requestRobots = () => dispatch => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\r\n}","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux'\r\nimport { createLogger } from 'redux-logger'\r\nimport { searchRobots, requestRobots } from './reducers'\r\nimport { Provider } from 'react-redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport App from './containers/App'\r\n\r\nconst logger = createLogger()\r\n\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots })\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(thunkMiddleware, logger)\r\n)\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)"],"sourceRoot":""}